// Code generated by go-bindata.
// sources:
// templates/errors/403.html
// templates/errors/403.json
// templates/errors/403.txt
// templates/errors/403.xml
// templates/errors/404-dev.html
// templates/errors/404.html
// templates/errors/404.json
// templates/errors/404.txt
// templates/errors/404.xml
// templates/errors/405.html
// templates/errors/405.json
// templates/errors/405.txt
// templates/errors/405.xml
// templates/errors/500-dev.html
// templates/errors/500.html
// templates/errors/500.json
// templates/errors/500.txt
// templates/errors/500.xml
// DO NOT EDIT!

package mars

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _errors403Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8e\xbb\xae\xc2\x30\x0c\x86\xe7\xf6\x29\x72\xfa\x00\x8d\xce\x6e\xb2\xd0\xb2\xc2\xd0\x85\xb1\x25\x16\x89\x14\x92\xc8\x58\x42\x28\xea\xbb\x93\x4b\xa7\x5f\xfe\x2f\x9f\x0c\x7f\xd3\xf5\xbc\xdc\x6f\xb3\x30\xfc\x72\xaa\x87\x22\xc2\xad\xfe\x79\x1a\xd0\x0f\xaa\xef\xc0\xe0\xaa\xb3\x76\xc0\x96\x1d\xaa\x4b\xa0\xcd\x6a\x8d\x1e\x64\x33\x72\x45\x1e\x1d\xd8\x82\xfe\x66\x4d\xe9\x63\xd9\x88\x71\x26\x0a\xb4\xef\x05\xf2\x5f\x10\x29\x8d\x4b\xd9\x54\x4b\x56\x0f\xe2\x11\x4c\xf8\x7e\x90\x8d\x6c\x83\x6f\x71\xac\x20\xf4\xba\x9d\x0d\x9d\x57\xf5\xcf\x5f\x00\x00\x00\xff\xff\xcb\x9b\x9d\x5f\xb8\x00\x00\x00")

func errors403HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors403Html,
		"errors/403.html",
	)
}

func errors403Html() (*asset, error) {
	bytes, err := errors403HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/403.html", size: 184, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors403Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x00\x02\xa5\x92\xcc\x92\x9c\x54\x25\x2b\x05\xa5\xea\xea\xac\x62\x05\x3d\xd7\xa2\xa2\xfc\x22\xbd\x10\x90\x60\x6d\xad\x92\x0e\x44\x4d\x4a\x6a\x71\x72\x51\x66\x41\x49\x66\x7e\x1e\xba\x4a\x17\x84\x14\x50\x3d\x57\x2d\x17\x20\x00\x00\xff\xff\x68\x44\xd3\x88\x57\x00\x00\x00")

func errors403JsonBytes() ([]byte, error) {
	return bindataRead(
		_errors403Json,
		"errors/403.json",
	)
}

func errors403Json() (*asset, error) {
	bytes, err := errors403JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/403.json", size: 87, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors403Txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x0b\xc9\x2c\xc9\x49\xad\xad\xe5\xe2\x82\x8b\xb8\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x01\xc5\x01\x01\x00\x00\xff\xff\xb3\x4d\x36\x36\x29\x00\x00\x00")

func errors403TxtBytes() ([]byte, error) {
	return bindataRead(
		_errors403Txt,
		"errors/403.txt",
	)
}

func errors403Txt() (*asset, error) {
	bytes, err := errors403TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/403.txt", size: 41, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors403Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xcb\x2f\x4a\xca\x4c\x49\x49\xcd\xb3\xab\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x73\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\xab\xad\xb5\xd1\x47\xa8\xe0\x02\x04\x00\x00\xff\xff\xe3\x85\x35\xef\x2e\x00\x00\x00")

func errors403XmlBytes() ([]byte, error) {
	return bindataRead(
		_errors403Xml,
		"errors/403.xml",
	)
}

func errors403Xml() (*asset, error) {
	bytes, err := errors403XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/403.xml", size: 46, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors404DevHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4f\x8f\xda\x3c\x10\xc6\xcf\xe1\x53\x8c\x40\xef\x8d\x0d\xff\xde\xa2\x55\x1a\x90\x56\xdb\xad\x7a\xa9\x54\xb5\xfb\x05\x4c\x3c\x60\x6b\x1d\x3b\xb2\x5d\x16\x1a\xe5\xbb\x77\x6c\xa7\xd0\xc0\xa5\xf1\x01\x3c\x9e\xf9\xcd\xf3\x8c\x5d\x3a\x7f\x56\x08\xfe\xdc\xe0\x66\xec\xf1\xe4\x67\x95\x73\xe3\xed\x28\x13\xbe\x56\x53\xd8\x19\x7e\x86\x76\x94\x65\x35\xb3\x07\xa9\x0b\x98\x7f\xa4\x4d\xc3\x38\x97\xfa\xd0\xef\xf6\x46\xfb\x87\x3d\xab\xa5\x3a\x17\xf0\x05\xd5\x11\xbd\xac\xd8\x14\x9e\xac\x64\x84\xf8\xc1\xb4\x0b\x69\x3b\x56\xbd\x1d\xac\xf9\xa9\x79\x01\x93\x97\xf8\x51\xb8\x1b\x65\xf9\x4e\x99\xea\x2d\x76\xb9\x80\x97\xf3\xe6\x14\x8b\x8c\xe5\x68\x1f\x76\xc6\x7b\x53\x17\xb0\x68\x4e\xe0\x8c\x92\x1c\x26\x8c\xb1\x54\x3e\x11\xc8\x28\x07\xc4\x22\x22\xa2\x9a\x77\x94\x07\xe1\x0b\xd0\xc6\xd6\x4c\x5d\x44\x3a\xf9\x0b\x89\xfd\x98\xd8\x7f\x5b\x0a\x9c\xda\x58\x8c\x88\xca\x28\x63\x49\xe4\x7a\xbd\xbe\x29\x7d\x9c\xff\x77\x55\x15\xf0\x1a\x87\x22\xda\x5b\xa3\x9f\xe9\x7b\x7e\x1e\x26\x35\x83\x2e\xab\xd5\xaa\x3f\xa6\x1a\x8f\xee\x9e\xb1\x5f\x87\x35\x4c\x12\xcb\x7f\x74\xbb\xb8\x75\x4b\x6b\x41\xd3\xbd\xd8\xee\x81\x46\x11\x70\x10\x51\xf2\xda\xa2\x67\xfd\x9f\x58\x83\x1b\xaf\x8d\x36\xae\x61\x55\x98\xc4\x9d\xa9\x72\x16\xdf\xd7\x76\x34\x2a\xb9\x3c\x82\xe4\x9b\x71\x1a\xc2\x18\x2a\xc5\x9c\xdb\x8c\xe3\xe5\x87\x07\xd7\xb6\xef\xd2\x0b\xc8\x5f\xac\x35\xb6\x23\x1d\xa5\x58\x50\x98\xe2\xf9\xab\xf4\x0a\x63\x68\x16\x63\x65\xd3\x1f\x7c\x42\x57\x59\xd9\x78\x69\x74\x3a\x6e\x22\x08\x35\xef\x42\x6f\x6a\xb9\xbd\x36\x4e\xb6\xee\x1b\x97\x62\xb9\x7d\x15\xe8\x10\xfe\xcc\x96\x1d\x11\x76\x88\x1a\xbc\x95\xc8\xa7\x20\xe9\x9f\x90\x34\xa3\x70\xed\x50\x90\x8a\x65\xa8\x33\x2a\xc9\xb0\x4c\x1f\x10\xf2\xef\xa1\xda\xa6\x1f\x17\xe4\x64\x59\xa9\xe4\xb6\x6d\xe9\x55\x43\xfe\x15\xbd\x30\x9c\x46\xdf\x75\x7d\xe4\x1b\x23\xbb\x1f\xe2\x3e\x7f\xaa\x92\x87\x72\x46\x15\x11\x9a\x3c\x90\xa5\xd0\xa5\xb7\xf2\x3b\x00\x00\xff\xff\xc9\x75\x6f\x71\xad\x03\x00\x00")

func errors404DevHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404DevHtml,
		"errors/404-dev.html",
	)
}

func errors404DevHtml() (*asset, error) {
	bytes, err := errors404DevHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404-dev.html", size: 941, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors404Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8f\xbb\x6e\x84\x30\x10\x45\x6b\xfc\x15\x8e\xfb\xd8\x89\x44\xe9\xb8\x09\x94\x79\x14\x34\x29\xc9\x7a\x58\x2c\x19\x1b\x99\x59\x56\x2b\x8b\x7f\x5f\x3f\xa8\x06\x9d\x7b\x98\xb9\x96\x2f\xdd\xcf\xe7\xf0\xf7\xdb\xd3\x19\x17\xab\x88\xcc\x83\xda\xd1\x5d\x3f\x18\x38\xa6\x48\x23\x67\x18\x75\x9a\x8d\x44\x83\x16\xd4\xb7\x47\x3a\xf9\x9b\xd3\x52\x54\x90\x14\x71\x3a\xf2\xdf\xeb\x87\x22\x24\x46\x33\x51\xde\xc1\xfe\xe5\x35\x1c\x47\x06\x08\xcb\x6a\x47\x04\xca\x20\x04\x1f\x36\xd1\xbe\xb5\xaf\x1a\x76\x9e\x0f\x32\xca\xab\x05\x76\x2b\x7e\x13\xe3\xdd\xe0\x4c\x79\x9f\xe5\x44\x52\x8d\xf7\x5c\x22\x46\x3e\xe4\xab\x05\x89\xc2\xe4\x7a\x06\x1d\x6c\x97\x60\x56\x34\xde\xd5\x38\x07\x69\xa7\xd3\xe7\xf2\xfa\x91\x82\x5a\x33\xfd\x5f\xde\xfc\x0c\x00\x00\xff\xff\x13\x44\x04\x34\x04\x01\x00\x00")

func errors404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Html,
		"errors/404.html",
	)
}

func errors404Html() (*asset, error) {
	bytes, err := errors404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.html", size: 260, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors404Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x00\x02\xa5\x92\xcc\x92\x9c\x54\x25\x2b\x05\xa5\xea\xea\xac\x62\x05\x3d\xd7\xa2\xa2\xfc\x22\xbd\x10\x90\x60\x6d\xad\x92\x0e\x44\x4d\x4a\x6a\x71\x72\x51\x66\x41\x49\x66\x7e\x1e\xba\x4a\x17\x84\x14\x50\x3d\x57\x2d\x17\x20\x00\x00\xff\xff\x68\x44\xd3\x88\x57\x00\x00\x00")

func errors404JsonBytes() ([]byte, error) {
	return bindataRead(
		_errors404Json,
		"errors/404.json",
	)
}

func errors404Json() (*asset, error) {
	bytes, err := errors404JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.json", size: 87, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors404Txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x0b\xc9\x2c\xc9\x49\xad\xad\xe5\xe2\x82\x8b\xb8\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x01\xc5\x01\x01\x00\x00\xff\xff\xb3\x4d\x36\x36\x29\x00\x00\x00")

func errors404TxtBytes() ([]byte, error) {
	return bindataRead(
		_errors404Txt,
		"errors/404.txt",
	)
}

func errors404Txt() (*asset, error) {
	bytes, err := errors404TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.txt", size: 41, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors404Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\xcb\x2f\x49\xcb\x2f\xcd\x4b\xb1\xab\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x73\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\xab\xad\xb5\xd1\x87\x2b\xe0\x02\x04\x00\x00\xff\xff\x72\x9e\x8f\xfc\x2c\x00\x00\x00")

func errors404XmlBytes() ([]byte, error) {
	return bindataRead(
		_errors404Xml,
		"errors/404.xml",
	)
}

func errors404Xml() (*asset, error) {
	bytes, err := errors404XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/404.xml", size: 44, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors405Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8e\xbb\xae\xc2\x30\x0c\x86\xe7\xf6\x29\x72\xfa\x00\xad\xce\x6e\xb2\xd0\x8e\x08\x86\x2e\x8c\x81\x58\x24\x52\x88\xa3\x60\xa9\x42\x51\xdf\x9d\x5c\x3a\xfd\xf2\x7f\xf9\x64\xf8\x9b\xaf\xe7\xf5\x7e\x5b\x84\xe1\xb7\x93\x3d\x14\x11\x4e\xf9\xd7\x69\x40\x3f\xc8\xbe\x03\x83\x4a\x67\xed\x80\x2d\x3b\x94\x17\x64\x43\x5a\x78\x62\xa1\x9c\xa3\x0d\x35\x4c\x2d\xc9\xdd\xe9\x28\xc3\x83\xf4\x37\x6b\x4a\x9b\x65\x23\xc6\x25\x46\x8a\xfb\x5e\x68\xff\x85\x95\xd2\xb8\x96\x4d\xb5\xa6\xea\x41\x38\x82\x19\x3f\xcf\x68\x03\x5b\xf2\x2d\x0e\x15\x84\x5e\xb7\xb3\xa1\xf3\xaa\x3e\xfc\x0b\x00\x00\xff\xff\x7a\x1e\xd5\x9b\xc1\x00\x00\x00")

func errors405HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors405Html,
		"errors/405.html",
	)
}

func errors405Html() (*asset, error) {
	bytes, err := errors405HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/405.html", size: 193, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors405Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x00\x02\xa5\x92\xcc\x92\x9c\x54\x25\x2b\x05\xa5\xea\xea\xac\x62\x05\x3d\xd7\xa2\xa2\xfc\x22\xbd\x10\x90\x60\x6d\xad\x92\x0e\x44\x4d\x4a\x6a\x71\x72\x51\x66\x41\x49\x66\x7e\x1e\xba\x4a\x17\x84\x14\x50\x3d\x57\x2d\x17\x20\x00\x00\xff\xff\x68\x44\xd3\x88\x57\x00\x00\x00")

func errors405JsonBytes() ([]byte, error) {
	return bindataRead(
		_errors405Json,
		"errors/405.json",
	)
}

func errors405Json() (*asset, error) {
	bytes, err := errors405JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/405.json", size: 87, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors405Txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x0b\xc9\x2c\xc9\x49\xad\xad\xe5\xe2\x82\x8b\xb8\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x01\xc5\x01\x01\x00\x00\xff\xff\xb3\x4d\x36\x36\x29\x00\x00\x00")

func errors405TxtBytes() ([]byte, error) {
	return bindataRead(
		_errors405Txt,
		"errors/405.txt",
	)
}

func errors405Txt() (*asset, error) {
	bytes, err := errors405TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/405.txt", size: 41, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors405Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x4d\x2d\xc9\xc8\x4f\xd1\xcd\xcb\x2f\xd1\x4d\xcc\xc9\xc9\x2f\x4f\x4d\xb1\xab\xae\xd6\x73\x2d\x2a\xca\x2f\xd2\x73\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\xab\xad\xb5\xd1\xc7\xa2\x94\x0b\x10\x00\x00\xff\xff\x6b\x32\xfe\xc9\x40\x00\x00\x00")

func errors405XmlBytes() ([]byte, error) {
	return bindataRead(
		_errors405Xml,
		"errors/405.xml",
	)
}

func errors405Xml() (*asset, error) {
	bytes, err := errors405XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/405.xml", size: 64, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors500DevHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x6d\x6b\x23\x37\x10\xfe\xec\xfb\x15\xaa\x43\xa1\x2d\xf1\x5b\x7c\x84\x63\xe3\x18\x42\x7a\xa1\x07\x6d\x29\x5c\xfe\x80\xbc\xd2\x5a\xe2\xb4\xd2\x22\xc9\x71\xdc\x25\xff\xfd\x46\x6f\x7b\xda\x5d\x9f\x49\x8c\x89\x35\x3b\x7a\xe6\x99\x67\x5e\xec\xc9\x64\x63\xec\x49\x50\x64\x4f\x0d\xbd\x9f\x5a\xfa\x6a\x17\xa5\x31\xd3\xed\x87\xc9\x84\xd9\x5a\x5c\xa3\x9d\x22\x27\xd4\xc2\x71\x52\x63\xbd\xe7\xb2\x40\xcb\x3b\x77\x6a\x30\x21\x5c\xee\xd3\xb1\x52\xd2\xce\x2a\x5c\x73\x71\x2a\xd0\x5f\x54\xbc\x50\xcb\x4b\x7c\x8d\x1e\x34\xc7\x80\xf2\x15\x4b\xe3\xfd\x76\xb8\xfc\xb6\xd7\xea\x20\x49\x81\xae\x3e\xfb\x3f\x67\x7f\x83\xf7\x7c\x27\x54\xf9\x2d\xc4\xea\xd0\x6f\x96\xcd\x6b\xb8\xa8\x34\xa1\x7a\xb6\x53\xd6\xaa\xba\x40\xab\xe6\x15\x19\x25\x38\x41\x57\x18\xe3\x04\x71\xc5\x28\x06\x2f\xc4\x56\x01\xc6\xb3\x3a\x52\xbe\x67\xb6\x40\x52\xe9\x1a\x8b\x1f\x6c\x0d\xff\x9f\x42\x80\x4f\x31\x40\x2f\x3d\x0f\x56\x2b\x4d\x03\x4e\xa9\x84\xd2\x40\xf8\xf6\xf6\x76\x78\xff\xd3\xf2\xd7\x8c\x9f\x8b\x22\xe9\x90\x4e\x3b\xca\xbc\x2a\xc9\x0d\x19\xd1\x6e\xfa\xd1\xd6\xeb\x75\xe7\x61\xd4\x41\x97\xf4\x1c\xd2\xad\x7b\x0d\xfd\xd8\xcd\xbb\x05\x58\x8d\x04\x80\xd7\x0a\x64\xcf\x94\x88\xa8\x73\xc1\x25\xfd\xf7\x50\xef\x52\x4e\x95\x50\x18\x80\x05\xad\xac\x87\x20\xdc\x34\x02\x43\x07\xf8\x52\x7a\xd3\x91\x13\xcb\x0a\xf4\x31\xd5\xd1\xb5\xd8\x0c\x0b\xbe\x87\x48\xda\xf1\xca\x62\xcf\x74\x20\xba\x4a\xce\x39\xcd\x8f\xb9\x2d\x75\x5a\xad\xa4\x32\x0d\x2e\xe9\xb8\xb9\xa2\x7a\x9d\x9a\x55\x55\x9d\xcd\x27\x6a\x2e\x28\x06\x2f\x68\x2f\x76\x77\xa6\x06\x89\x60\xd6\x7e\x43\xb0\x26\x35\xcb\x39\xd2\xfd\xd9\x51\x2f\x54\x83\x74\xc7\xd9\x6b\x81\x18\x27\x84\xca\x11\x33\xaa\xb5\xd2\xfd\x76\x28\x97\x4b\xf4\x0b\xaf\x1b\xa5\x2d\x96\xf6\x27\x37\x46\x25\xea\x69\x02\x10\xc3\x7b\x38\xb8\xf9\xb2\x10\x5a\x2a\x8d\x2d\x57\x72\xd0\xc7\xc9\xb7\x60\x8e\x3a\xfa\x23\x12\x3b\x68\xe3\x98\x35\x8a\x4b\x0b\xe6\x9f\x93\x4b\x17\x3b\x8d\x7a\xac\x9e\x1e\x9e\x9e\x1e\x9f\x2e\x5c\xa7\x75\xae\xac\xdb\x57\xbd\x66\x1e\x71\x07\x58\xaa\x9d\x10\x77\xa3\x19\xd8\x29\x41\x86\xf0\xc6\x6a\x25\xf7\x17\x43\x5c\xc0\xb0\x38\x2d\xad\x5e\x52\x94\xd2\xde\x9e\x84\x99\x82\x34\xe0\x3d\xb8\xc9\xd6\x17\x27\x35\xf3\x2c\x15\xc9\x3b\x2c\x8e\x40\x7f\x02\x8e\x8c\x5b\x3a\xf3\xe7\xc2\xa9\x9d\x20\x36\x0b\x9f\x93\x5b\xeb\x6d\x7b\xe4\x96\xa1\xf9\x67\xd7\x2f\x6f\xfe\x21\xe1\x2f\x88\x93\xfb\x69\x58\x43\x53\x54\x0a\x6c\xcc\xfd\xd4\x0f\xb1\xff\x2a\x98\x6c\xd8\x6a\xdb\xb6\xf3\x67\x6e\x05\x7d\x7b\xdb\x2c\xe0\xe8\xcd\x8d\xff\x07\x98\xbc\x42\xf3\xaf\x5e\xce\x67\xf8\x26\xf1\xb0\xf0\xf7\xcc\x80\x71\xdb\x7b\x80\x36\x41\x6e\x07\xf7\x1f\xb6\xcc\xa1\x45\x0b\x22\x8a\x1a\xc8\xdd\x42\xaa\x75\xc3\x5d\x09\x32\xe7\x3f\xa9\x29\x35\x6f\x5c\x85\xb3\x3b\x31\x3c\x15\xa6\x0b\x3a\xf4\x4d\x2e\x92\x84\xcf\x9b\x85\x67\xbd\x59\x40\xda\x41\x10\x47\x3e\x70\xc9\xd5\x08\xdd\x71\x5e\x8d\x9b\xed\x17\x89\xba\x0c\x32\x0d\xfe\x86\xae\x4b\x44\x7e\xc3\xbe\x19\x50\xfe\x24\x6c\x9c\x36\x9e\x22\xab\xe0\xf0\xa8\xc4\xa1\x06\xbe\x90\xbd\xfb\xe0\xbc\x92\x29\xfa\xfd\x3e\x4e\x05\x98\x7c\xf0\x36\x8d\xe5\x9e\x3a\x10\xe9\xc6\x21\x28\x1e\x89\xf8\x8c\x62\x16\x31\xbe\x8b\xf7\xc5\xc4\x16\xf0\x9b\x23\xa2\x86\x04\xdd\xcf\x82\x06\xcb\xfc\x52\xd8\x29\xd3\x6d\xc7\xbd\x80\x1a\x80\x4f\xf2\x87\x66\xdb\x76\xa5\x76\x05\x72\x86\x10\x3e\x09\x9d\x31\xcf\xc4\x4f\xa6\xd8\x43\xae\xd5\x07\x75\x70\xa6\x24\xfc\x7a\xfb\x88\x85\x40\xde\x0d\xb2\x5f\x07\xb3\x1b\x0d\x1f\x3d\xdc\xde\x2c\xbc\xe1\x52\x9c\x7f\xa8\xc5\x3f\x26\xe0\x3d\x45\xf7\x55\x7f\x80\x61\x76\x5d\x05\x1c\x4e\xd7\x08\x14\x0a\x5b\x57\x95\xb0\x0b\x35\x25\x08\xe6\x0f\x7e\x4c\x31\x2c\x09\x68\xb6\x47\x96\x71\x13\x5c\xe6\x5d\xa9\xc6\xe5\xf0\x0e\x49\x78\xc8\x62\xc0\x2d\x13\xf0\x6c\x3a\xe1\xd3\xf7\x00\x00\x00\xff\xff\xd5\x95\xb6\xde\xca\x09\x00\x00")

func errors500DevHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500DevHtml,
		"errors/500-dev.html",
	)
}

func errors500DevHtml() (*asset, error) {
	bytes, err := errors500DevHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500-dev.html", size: 2506, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors500Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x90\x3f\x6b\x04\x21\x10\xc5\xeb\xcd\xa7\x30\x57\x27\x7a\x77\x90\x6e\x10\x42\xf6\xca\x70\x29\xb6\x49\x69\x74\x82\x82\xbb\x8a\x9a\x85\x20\x7e\xf7\xf8\x67\x49\xe3\xc0\xbc\xf7\x7c\x3f\x06\x1e\xe7\xfb\xdb\xf2\xf9\x71\x23\x3a\xad\x96\x3f\xc0\x18\x13\x68\x14\xaa\xce\x09\x92\x49\x16\xf9\xab\xf7\xd6\x48\x91\x8c\xdb\x08\x86\xe0\x02\xb0\x21\x54\x2b\x3b\xbc\xf0\xe5\xd4\x6f\xcb\xe4\x6c\xbe\x09\x9d\x71\x7f\x77\x0a\x4b\xe9\x9b\x84\xab\xb7\x22\x21\x39\xf5\x78\x64\x2f\xe7\xf3\xb3\xc2\x9d\xb6\xc2\x13\xa1\x87\x0d\x6d\x1c\x09\xd0\x17\x7e\x77\x3e\x3e\x11\x71\x34\x12\x27\xe5\x4f\x40\x45\x6b\xe1\xa5\xa3\xe9\x2b\xcf\x99\xde\x9a\x48\x97\x46\x53\x4a\xd5\xae\x5d\xf3\xed\x9d\xfe\xe5\x19\xa3\x0c\xc6\x37\xfe\xf1\x3d\xf3\x83\x14\x37\xd5\x16\xc0\x06\x7c\xcd\xf7\x03\xfc\x05\x00\x00\xff\xff\xf9\xbe\xf4\x8e\x18\x01\x00\x00")

func errors500HtmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Html,
		"errors/500.html",
	)
}

func errors500Html() (*asset, error) {
	bytes, err := errors500HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.html", size: 280, mode: os.FileMode(420), modTime: time.Unix(1474381176, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors500Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x00\x02\xa5\x92\xcc\x92\x9c\x54\x25\x2b\x05\xa5\xea\xea\xac\x62\x05\x3d\xd7\xa2\xa2\xfc\x22\xbd\x10\x90\x60\x6d\xad\x92\x0e\x44\x4d\x4a\x6a\x71\x72\x51\x66\x41\x49\x66\x7e\x1e\xba\x4a\x17\x84\x14\x50\x3d\x57\x2d\x17\x20\x00\x00\xff\xff\x68\x44\xd3\x88\x57\x00\x00\x00")

func errors500JsonBytes() ([]byte, error) {
	return bindataRead(
		_errors500Json,
		"errors/500.json",
	)
}

func errors500Json() (*asset, error) {
	bytes, err := errors500JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.json", size: 87, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors500Txt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\xc1\xca\xc2\x30\x10\x84\xef\x7d\x8a\xa5\xa7\xff\x3f\x98\x07\xf0\xe0\x45\x3d\x14\x14\x44\x7d\x81\xd2\xac\x36\x50\x36\xba\x4d\x55\x08\x7d\x77\xb7\x59\x8d\x62\x2e\xd9\x19\xe6\x9b\x89\xd1\xac\x99\x3d\x9b\xa3\x0b\x1d\x8e\x63\x91\x8d\x15\xf6\x0d\xbb\x4b\x70\x9e\xc4\x16\xdf\x9d\x00\xaf\x60\xf6\x03\x6d\xbd\x45\x28\x2d\xde\xca\x04\xdc\x5d\x68\x41\xa9\xa4\x25\x68\x76\x75\x68\x45\xcc\xf2\x2b\x2a\x02\xe9\x56\x1f\x34\xb4\x71\x24\x93\x7f\x35\xfb\x81\x2c\x74\xa2\xa6\x88\xba\xff\x31\x22\x59\x5d\xe6\x9a\xce\x08\x66\xe9\x29\xe0\x23\x1c\xfc\xc0\x0d\xe6\xa5\xaa\x7f\x2d\x2f\x84\xe8\x7a\x4c\xed\x09\xfd\x94\xcd\xa7\xf3\xcd\x7d\x15\xeb\xf1\xfb\x3f\x03\x00\x00\xff\xff\xb3\x88\xf0\x34\x14\x01\x00\x00")

func errors500TxtBytes() ([]byte, error) {
	return bindataRead(
		_errors500Txt,
		"errors/500.txt",
	)
}

func errors500Txt() (*asset, error) {
	bytes, err := errors500TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.txt", size: 276, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _errors500Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\x2d\x2a\xca\x2f\xb2\xe3\xe2\xb4\x29\xc9\x2c\xc9\x49\xb5\xab\xae\xd6\x73\x05\x89\xe8\x85\x80\xb8\xb5\xb5\x36\xfa\x10\x71\xa0\x82\x94\xd4\xe2\xe4\xa2\xcc\x82\x92\xcc\xfc\x3c\x84\x32\x17\x84\x20\x48\x31\xb2\x1a\x2e\x1b\x7d\xa8\xe1\x80\x00\x00\x00\xff\xff\xc2\x10\xe4\x31\x65\x00\x00\x00")

func errors500XmlBytes() ([]byte, error) {
	return bindataRead(
		_errors500Xml,
		"errors/500.xml",
	)
}

func errors500Xml() (*asset, error) {
	bytes, err := errors500XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "errors/500.xml", size: 101, mode: os.FileMode(420), modTime: time.Unix(1445374258, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"errors/403.html": errors403Html,
	"errors/403.json": errors403Json,
	"errors/403.txt": errors403Txt,
	"errors/403.xml": errors403Xml,
	"errors/404-dev.html": errors404DevHtml,
	"errors/404.html": errors404Html,
	"errors/404.json": errors404Json,
	"errors/404.txt": errors404Txt,
	"errors/404.xml": errors404Xml,
	"errors/405.html": errors405Html,
	"errors/405.json": errors405Json,
	"errors/405.txt": errors405Txt,
	"errors/405.xml": errors405Xml,
	"errors/500-dev.html": errors500DevHtml,
	"errors/500.html": errors500Html,
	"errors/500.json": errors500Json,
	"errors/500.txt": errors500Txt,
	"errors/500.xml": errors500Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"errors": &bintree{nil, map[string]*bintree{
		"403.html": &bintree{errors403Html, map[string]*bintree{
		}},
		"403.json": &bintree{errors403Json, map[string]*bintree{
		}},
		"403.txt": &bintree{errors403Txt, map[string]*bintree{
		}},
		"403.xml": &bintree{errors403Xml, map[string]*bintree{
		}},
		"404-dev.html": &bintree{errors404DevHtml, map[string]*bintree{
		}},
		"404.html": &bintree{errors404Html, map[string]*bintree{
		}},
		"404.json": &bintree{errors404Json, map[string]*bintree{
		}},
		"404.txt": &bintree{errors404Txt, map[string]*bintree{
		}},
		"404.xml": &bintree{errors404Xml, map[string]*bintree{
		}},
		"405.html": &bintree{errors405Html, map[string]*bintree{
		}},
		"405.json": &bintree{errors405Json, map[string]*bintree{
		}},
		"405.txt": &bintree{errors405Txt, map[string]*bintree{
		}},
		"405.xml": &bintree{errors405Xml, map[string]*bintree{
		}},
		"500-dev.html": &bintree{errors500DevHtml, map[string]*bintree{
		}},
		"500.html": &bintree{errors500Html, map[string]*bintree{
		}},
		"500.json": &bintree{errors500Json, map[string]*bintree{
		}},
		"500.txt": &bintree{errors500Txt, map[string]*bintree{
		}},
		"500.xml": &bintree{errors500Xml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

